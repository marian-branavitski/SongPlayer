#BlueJ class context
comment0.target=CustomSongList
comment1.params=tempSong
comment1.target=void\ addCustomSongToList(CustomSong)
comment1.text=\n\ Function\ takes\ in\ an\ object\ of\ class\ CustomSong\ and\ adds\ it\ into\ the\ global\ array\ with\ all\ the\ songs\ of\ the\ instance\ of\ this\ class\ (individual\ playlist).\ Position\ counter\ \n\ is\ then\ incremented\ to\ point\ at\ the\ next\ available\ position\n
comment2.params=playlistTitle\ userID
comment2.target=boolean\ writeAllSongsToFile(java.lang.String,\ java.lang.String)
comment2.text=\n\ \ \ \ \ \ \ Function\ takes\ a\ playlist\ title\ and\ a\ user\ id\ as\ a\ parameter.\ First\ it\ will\ check\ if\ the\ specified\ user\ directory\ exists\ in\ the\ users\ folder\n\ \ \ \ \ \ \ getting\ the\ path\ to\ users/'user\ ID'\ and\ using\ the\ function\ exists\ of\ class\ Files\ which\ returns\ true\ if\ the\ path\ exists.\ In\ case\n\ \ \ \ \ \ \ the\ function\ returned\ true\ then\ the\ method\ checks\ for\ existance\ of\ text\ file\ with\ the\ name\ of\ the\ playlist.\ If\ such\ file\ already\ exist\n\ \ \ \ \ \ \ then\ the\ method\ will\ not\ allow\ to\ create\ another\ file\ with\ the\ same\ name.\ If\ such\ file\ does\ not\ exist\ then\ the\ method\ uses\ file\ writer\ object\n\ \ \ \ \ \ \ to\ write\ every\ object\ of\ class\ CustomSong\ in\ the\ array\ allSongs\ by\ iterating\ through\ the\ said\ array\ and\ creating\ a\ temporary\ object\ of\ \n\ \ \ \ \ \ \ class\ custom\ song\ that\ will\ then\ be\ written\ to\ the\ file\ with\ the\ name\ passed\ as\ a\ playlist\ title.\ In\ the\ case\ of\ missing\ user\ directory\n\ \ \ \ \ \ \ the\ function\ will\ throw\ a\ warning\ stating\ that\ the\ user\ account\ has\ likely\ been\ corrupted\n
comment3.params=userID\ playlistTitle
comment3.target=void\ readAllSongsFromFile(java.lang.String,\ java.lang.String)
comment3.text=\n\ Function\ takes\ in\ 2\ strings\ user\ id\ and\ playlist\ title.\ Both\ strings\ are\ used\ to\ identify\ the\ correct\ file\ and\ directory\ of\ the\ correct\ playlist\ of\ the\ apropriate\ user.\ First\ like\ the\ \n\ writing\ function,\ the\ read\ all\ function\ checks\ for\ the\ existance\ of\ the\ directory\ passed\ to\ the\ function\ by\ getting\ the\ path\ to\ the\ file\ through\ the\ use\ of\ class\ Path.\ Only\ if\ \n\ directory\ and\ file\ does\ exist,\ the\ function\ uses\ buffered\ reader\ to\ read\ each\ individual\ line,\ separate\ it\ by\ the\ comma\ sreating\ an\ array\ of\ values\ each\ value\ being\ an\ attribute\ of\ the\ \n\ object\ of\ class\ CustomSong.\ Temporary\ object\ of\ class\ Custom\ Song\ is\ then\ assigned\ with\ these\ values\ and\ is\ then\ added\ to\ the\ global\ array.\n
comment4.params=
comment4.target=void\ sortSongByRating()
comment4.text=\n\ This\ function\ uses\ a\ bubble\ sort.\ Outer\ loop\ iterates\ through\ the\ array\ taking\ each\ individual\ element,\ inner\ loop\ compares\ the\ taken\ element\ to\ the\ next\ element\ in\ the\ array\ if\ the\n\ current\ object's\ rating\ is\ lower\ than\ the\ next\ object's;\ then\ the\ current\ song\ is\ saved\ to\ a\ temporary\ variable,\ the\ current\ location\ of\ the\ array\ is\ overwritten\ with\ the\ object\ found\n\ in\ the\ next\ position\ and\ the\ next\ position\ is\ overwritten\ with\ the\ value\ from\ the\ temporary\ variable\ this\ way\ a\ swap\ is\ made\ and\ the\ swapMade\ variable\ is\ set\ to\ true,\ with\ each\ iteration\n\ of\ the\ outer\ loop\ it\ is\ set\ to\ false,\ that\ way\ if\ the\ inner\ loop\ made\ no\ swaps\ the\ value\ will\ never\ change\ causing\ the\ function\ to\ break\ from\ the\ inner\ loop\ and\ move\ on\ to\ comparing\ the\n\ next\ pair\ of\ values.\ Such\ use\ of\ variable\ reduces\ the\ time\ taken\ for\ the\ sort\ significantly\ improving\ the\ efficiency\ of\ this\ sorting\ function.\n
comment5.params=searchTerm
comment5.target=java.lang.String\ findSongByStringValues(java.lang.String)
comment5.text=\n\ This\ function\ takes\ in\ the\ string\ value\ used\ in\ the\ search\ as\ the\ search\ value.\ It\ uses\ the\ linear\ search\ to\ find\ any\ song\ by\ either\ it's\ title,\ artist\ name,\ album\ or\ its\ genre\ that\ way\n\ the\ user\ do\ not\ need\ to\ specify\ the\ field\ they\ are\ attempting\ the\ search\ in\ which\ improves\ the\ ux\ as\ less\ interactions\ are\ needed\ to\ perform\ the\ desired\ action.\ By\ being\ a\ linear\ search\ \n\ the\ global\ array\ does\ not\ need\ to\ be\ sorted\ and\ the\ values\ could\ be\ of\ type\ string.\ The\ user\ also\ does\ not\ need\ to\ enter\ the\ full\ name\ of\ the\ song,\ artist,\ etc.\ Instead\ the\ function\n\ compares\ the\ start\ of\ each\ value\ with\ the\ search\ term,\ making\ it\ easier\ to\ find\ the\ correct\ song.\ When\ the\ relevant\ to\ the\ search\ value\ result\ is\ found\ it\ is\ added\ to\ string\ variable\ \n\ all\ results,\ each\ result\ is\ separated\ by\ comma\ allowing\ all\ the\ results\ being\ returned\ at\ once\ by\ the\ function.\ \n
comment6.params=userID\ playlistTitle\ songToAdd
comment6.target=void\ addSongToExistingPlaylist(java.lang.String,\ java.lang.String,\ CustomSong)
comment6.text=\n\ The\ function\ reads\ the\ file\ with\ all\ the\ songs\ from\ the\ current\ playlist\ ensuring\ all\ the\ songs\ are\ added\ to\ the\ array\ first.\ The\ new\ song\ which\ is\ passed\ to\ the\ function\ as\ a\ parameter\n\ is\ then\ added\ to\ the\ array\ after\ which\ the\ file\ with\ the\ playlist\ is\ overwritten\ with\ all\ the\ previous\ plus\ the\ new\ song\ by\ using\ the\ object\ of\ class\ file\ writer.\ \n
comment7.params=userID\ playlistTitle\ songName
comment7.target=void\ deleteSong(java.lang.String,\ java.lang.String,\ java.lang.String)
comment7.text=\n\ Function\ reads\ through\ the\ file\ of\ the\ playlist\ if\ the\ song\ name\ of\ the\ object\ of\ custom\ song\ does\ not\ match\ with\ the\ name\ passed\n\ as\ a\ parameter,\ then\ that\ object\ is\ added\ to\ the\ temporary\ array.\ At\ the\ end\ there\ is\ an\ array\ with\ one\ of\ the\ elements\ from\ original\ array\n\ missing\ (that\ is\ the\ deleted\ song\ object).\ This\ new\ temporary\ array\ is\ written\ to\ the\ file\ using\ basic\ file\ writer\ which\ causes\ the\ original\n\ file\ to\ be\ overwritten,\ thus\ deleting\ the\ song\ user\ selected\ to\ delete\n
numComments=8
